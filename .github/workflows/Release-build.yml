name: ReleasePkg Build Release

on:
  push:
    tags:
      - v*
jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
          python-version: '3.10'

    - name: Set up ENV
      run: |
        chcp 65001
        echo ("RELEASE_VERSION=" + $env:GITHUB_REF.replace('refs/tags/', '')) >> $env:GITHUB_ENV
        echo ("RELEASE_TITLE=ReleasePkg_" + $env:GITHUB_REF.replace('refs/tags/', '') + "_windows_64bit") >> $env:GITHUB_ENV
        echo ("RELEASE_FILENAME=ReleasePkg_" + $env:GITHUB_REF.replace('refs/tags/', '') + "_windows_64bit.zip") >> $env:GITHUB_ENV
        git fetch --tags --force
    - name: Get tag message
      id: tag_data
      uses: ericcornelissen/git-tag-annotation-action@v1
    - name: Test ENV
      run: |
        echo $RELEASE_VERSION
        echo ${{ env.RELEASE_VERSION }}
        echo $RELEASE_TITLE
        echo ${{ env.RELEASE_TITLE }}
        echo $RELEASE_FILENAME
        echo ${{ env.RELEASE_FILENAME }}
        echo $TAG_MESSAGE
        echo '${{ steps.tag_data.outputs.git-tag-annotation }}'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build with PyInstaller for windows
      run: |
        pyinstaller --onefile ReleasePkg.py
      shell: cmd

    - name: Archive release
      run: 7z a -tzip ${{ env.RELEASE_FILENAME }} ReleasePkg.exe

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: "${{ env.RELEASE_TITLE }}"
        body: ${{ steps.tag_data.outputs.git-tag-annotation }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./${{ env.RELEASE_FILENAME }}
        asset_name: ${{ env.RELEASE_FILENAME }}
        asset_content_type: application/zip
